<?xml version="1.0" encoding="utf-8" ?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
  <id>http://weld.cdi-spec.org/</id>
  <title>Weld</title>
  <updated>2015-02-05T19:11:37+01:00</updated>
  <link href="http://weld.cdi-spec.org/news.atom" rel="self" type="application/atom+xml" />
  <link href="http://weld.cdi-spec.org/" rel="alternate" type="text/html" />
  <entry>
    <id>http://weld.cdi-spec.org/news/2015/02/05/weld-300Alpha4/</id>
    <title>Weld 3.0.0.Alpha4</title>
    <updated>2015-02-05T19:11:37+01:00</updated>
    <published>2015-02-05T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2015/02/05/weld-300Alpha4/" rel="alternate" type="text/html" />
    <author>
      <name>Jozef Hartinger</name>
    </author>
    <summary>
      
      Here we are again with the next Alpha release of Weld 3.
      This time there are no additional CDI 2.0 previews.
      Instead, this release contains multiple performance improvements, enables @Asynchronous
      calls to be implemented simply with CDI interceptors and most importantly, it comes with
      weld-probe.
      
      
      Weld Probe
      
      
      Why isn&#8217;t my field injected?
      Why isn&#8217;t my interceptor triggered?
      What extensions do third-party libraries register?
      
      
      Have you ever found yourself asking a similar question?
      Making Weld developer-friendly and helpful in troubleshooting is our priority.
      Yet, similar problems still occur sometimes.
      
      
      But we can do event better! In Alpha4 of Weld 3 we are introducing a new tool called Weld Probe.
      Probe is a built-in tool...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Here we are again with the next Alpha release of Weld 3.
      This time there are no additional CDI 2.0 previews.
      Instead, this release contains multiple performance improvements, enables &lt;code&gt;@Asynchronous&lt;/code&gt;
      calls to be implemented simply with CDI interceptors and most importantly, it comes with
      &lt;strong&gt;weld-probe&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_weld_probe&quot;&gt;Weld Probe&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Why isn&amp;#8217;t my field injected?
      Why isn&amp;#8217;t my interceptor triggered?
      What extensions do third-party libraries register?&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Have you ever found yourself asking a similar question?
      Making Weld developer-friendly and helpful in troubleshooting is our priority.
      Yet, similar problems still occur sometimes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;But we can do event better! In Alpha4 of Weld 3 we are introducing a new tool called &lt;strong&gt;Weld Probe&lt;/strong&gt;.
      Probe is a built-in tool that provides a detailed view into internals of a CDI application.
      Weld Probe has a web UI and is provided out-of-the-box.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Probe makes it easy to inspect:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;beans, their properties such as qualifiers, stereotypes and name&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;a graph of bean dependencies&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;observers and producers declared by beans&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;interceptors and decorators bound to a bean&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;extensions&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;information about current contextual instances&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;tracking of invocations and invocation trees&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Plus more addons are planned in future.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img src=&quot;https://developer.jboss.org/servlet/JiveServlet/showImage/38-5641-24345/probe_bean_detail.png&quot; alt=&quot;Weld Probe Screenshot&quot;&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To try probe all that needs to be done is to upgrade to Alpha4, enable the development mode and point your browser to the URL
      of your CDI application plus &lt;code&gt;/weld-probe&lt;/code&gt; suffix.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For more thorough overview of what Probe provides see
      &lt;a href=&quot;http://goo.gl/ICQrRA&quot;&gt;Martin&amp;#8217;s blog post&lt;/a&gt; or the
      &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.0.Alpha4/en-US/html/devmode.html#_probe&quot;&gt;reference documentation&lt;/a&gt;.
      You can play with Probe using this
      &lt;a href=&quot;http://probe-weld.itos.redhat.com/weld-numberguess&quot;&gt;simple CDI application&lt;/a&gt;
      hosted on &lt;a href=&quot;https://www.openshift.com/&quot;&gt;OpenShift&lt;/a&gt;. Just append
      &lt;a href=&quot;http://probe-weld.itos.redhat.com/weld-numberguess/weld-probe&quot;&gt;/weld-probe&lt;/a&gt;
      to the URL.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Bear in mind that Probe is still work in progress and that this early preview may have defects
      here and there.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_implementing_asynchronous_using_cdi_interceptor&quot;&gt;Implementing @Asynchronous using CDI interceptor&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;It &lt;strong&gt;is&lt;/strong&gt; possible to implement a substitute for EJB &lt;code&gt;@Asynchronous&lt;/code&gt; method calls using CDI interceptors.
      Arjan Tijms recently &lt;a href=&quot;http://jdevelopment.nl/cdi-based-asynchronous-alternative/&quot;&gt;blogged about his solution&lt;/a&gt;
      A similar one can be found in
      &lt;a href=&quot;https://github.com/weld/core/blob/master/tests-arquillian/src/test/java/org/jboss/weld/tests/interceptors/thread/async/AsyncInterceptor.java&quot;&gt;Weld&amp;#8217;s testsuite&lt;/a&gt;.
      Long story short: This would not work smoothly until now because of a limitation in Weld. This limitation is now gone in Alpha4.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_performance&quot;&gt;Performance&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This release integrates various runtime performance improvements mainly around bean instance construction,
      producer and observer method invocation.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_next&quot;&gt;Next&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld 3.0.0.Alpha5 is planned in 3 weeks time from now, with some more CDI 2.0 previews.
      We are going to continue releasing Alpha versions of Weld 3.0 roughly every 3 weeks until
      the early draft of CDI 2.0, which should happen sometime in March.
      At that point, we&amp;#8217;ll move to Beta releases.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In the meantime, we&amp;#8217;d like to hear your feedback on Probe or on Weld 3.0 Alpha releases in general.
      Feel free to use our &lt;a href=&quot;https://community.jboss.org/en/weld?view=discussions&quot;&gt;forums&lt;/a&gt; or &lt;a href=&quot;http://webchat.freenode.net/?channels=weld-dev&quot;&gt;#weld-dev on freenode&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/weld/javadoc/3.0/weld-api/org/jboss/weld/experimental/package-frame.html&quot;&gt;Experimental API documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12326166&quot;&gt;Release notes&lt;/a&gt; ]
      [ &lt;a href=&quot;https://sourceforge.net/projects/jboss/files/Weld/3.0.0.Alpha4&quot;&gt;Distribution&lt;/a&gt; ]
      [ Patch for Wildfly
      (&lt;a href=&quot;http://sourceforge.net/projects/jboss/files/Weld/3.0.0.Alpha4/wildfly-8.2.0.Final-weld-3.0.0.Alpha4-patch.zip/download&quot;&gt;8.2&lt;/a&gt;,
      &lt;a href=&quot;http://sourceforge.net/projects/jboss/files/Weld/3.0.0.Alpha4/wildfly-9.0.0.Alpha1-weld-3.0.0.Alpha4-patch.zip/download&quot;&gt;9 Alpha&lt;/a&gt;)
      ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2014/12/10/an-update-on-weld-3/</id>
    <title>An update on Weld 3</title>
    <updated>2015-02-05T17:50:53+01:00</updated>
    <published>2014-12-10T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2014/12/10/an-update-on-weld-3/" rel="alternate" type="text/html" />
    <author>
      <name>Jozef Hartinger</name>
    </author>
    <summary>
      
      Today we are releasing the third Alpha release of Weld 3. These Alpha releases serve
      as prototypes of changes currently being discussed by the CDI expert group for
      the upcoming CDI 2.0.
      
      
      The Alpha releases are not suitable for production use as the new API and functionality
      are still subject to change. We are releasing them to allow the community to test-drive
      the changes early in the development cycle. We want to shorten the feedback loop and
      identify possible glitches as soon as possible.
      
      
      Let’s just quickly review what has been available since Alpha1:
      
      
      
      
      declarative ordering of observer methods using @Priority
      
      
      ability for an extension to veto and modify...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Today we are releasing the third Alpha release of Weld 3. These Alpha releases serve
      as prototypes of changes currently being discussed by the CDI expert group for
      the upcoming CDI 2.0.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Alpha releases are not suitable for production use as the new API and functionality
      are still subject to change. We are releasing them to allow the community to test-drive
      the changes early in the development cycle. We want to shorten the feedback loop and
      identify possible glitches as soon as possible.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Let’s just quickly review what has been available since Alpha1:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;declarative ordering of observer methods using &lt;code&gt;@Priority&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;ability for an extension to veto and modify an observer method&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;support for Java 8 repeatable annotations as qualifiers and interceptor bindings&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;enhanced &lt;code&gt;AnnotatedType&lt;/code&gt; API&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For more details and examples of these features see my
      &lt;a href=&quot;http://weld.cdi-spec.org/news/2014/10/02/weld-300Alpha1/&quot;&gt;previous blog post&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;On top of this, we’re now adding the &lt;strong&gt;following new features and enhancements&lt;/strong&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;asynchronous events&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;simplified configuration of Weld-specific properties&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Guava is no longer used internally&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_asynchronous_events&quot;&gt;Asynchronous events&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Since its first version CDI has provided events as a facility for component interaction.
      Events enable loose coupling while preserving type safety.
      So far, CDI has supported synchronous delivery of events - the calling thread blocks
      until invocations of all associated observer methods complete. An alternative to
      this are transactional observer methods which are called asynchronously at the end
      of a transaction.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For the upcoming CDI 2.0 specification one of the hot topics is enhancement of the
      events facility. The expert group is
      &lt;a href=&quot;https://docs.google.com/document/d/1pDO7gru6YuEyTDdK3XBozvXZYucT9uC7McZMffSZun4/edit?usp=sharing&quot;&gt;considering adding fully asynchronous event dispatching mechanism&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A working prototype of this is available in Weld 3.0.0.Alpha3. The current proposal
      adds a method called &lt;code&gt;fireAsync&lt;/code&gt; to the existing &lt;code&gt;Event&lt;/code&gt; interface.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;java language-java&quot;&gt;@Inject
      private ExperimentalEvent&amp;lt;Configuration&amp;gt; event;
      …
      event.fireAsync(new Configuration());&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The call to &lt;code&gt;event.fireAsync()&lt;/code&gt; returns immediately. The event is delivered to
      corresponding observers in a dedicated thread pool that can be configured.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_what_about_thread_safety&quot;&gt;What about thread-safety?&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;There are two common usage pattens for events. In the first one an immutable event
      object is used. An alternative is to use mutable events. A mutable event allows
      observers to participate on the result which is later used by the component that
      fired the event. An example of this would be the
      &lt;a href=&quot;https://docs.oracle.com/javaee/6/api/javax/enterprise/inject/spi/ProcessAnnotatedType.html&quot;&gt;ProcessAnnotatedType&amp;lt;T&amp;gt;&lt;/a&gt;
      event used by CDI extensions. When events are fired synchronously, both
      approaches work fine but how does this work when we switch to async?&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Nothing changes actually. No matter if the event object is immutable or not, you
      do not have to worry about thread-safety of the event object. The current implementation
      comes with the guarantee that event object is safely published which means that
      an observer method observes the event in the state in which:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;it was left by an observer executing before the given observer, or&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;the initial state of the event if the given observer is the first one&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Furthermore, the state is consistent throughout the execution of an observer method
      which means that we guarantee safe publication and prevent races for you. The only
      thing that should be avoided is modifying the state of the event object outside of
      an observer method. This behavior matches the
      &lt;a href=&quot;https://docs.google.com/document/d/1lFtgLm6hY-uECdA1r0Sfimq6vkVYThoUZsevPUaSP0E/edit?usp=sharing&quot;&gt;option 4.1.1.1 in the current spec proposal&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Update: new &lt;a href=&quot;https://docs.google.com/document/d/1pDO7gru6YuEyTDdK3XBozvXZYucT9uC7McZMffSZun4/edit?usp=sharing&quot;&gt;link for a planning document&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In addition, if observer methods are ordered (another new feature proposed for CDI 2.0)
      we preserve the ordering (as in such situation the observers are ordered for a reason!)
      and invoke observers in the given order.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Last but not least, if an observer is transactional, we again preserve this and
      invoke the observer method in the corresponding transaction phase.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_how_do_i_know_when_event_delivery_finishes_and_what_about_exceptions&quot;&gt;How do I know when event delivery finishes and what about exceptions?&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In the current prototype we’re reusing the
      &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html&quot;&gt;CompletionStage&lt;/a&gt;
      API, introduced in Java 8, which allows actions (callbacks) to be bound to the completion of the
      asynchronous delivery process. This is what it looks like:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;java language-java&quot;&gt;event.fireAsync(new Configuration()).thenAccept(config -&amp;gt; master.compute(config));&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This piece of code starts with asynchronously firing a mutable configuration object
      allowing loosely-coupled observers to alter the configuration of a computation.
      Once all observers finish, computation is initiated based on the resulting configuration.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If an exception occurs this can be dealt with also, either by falling back to a default value&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;java language-java&quot;&gt;event.fireAsync(new Configuration())
          .exceptionally(throwable -&amp;gt; DEFAULT_CONFIGURATION)
          .thenAccept((config) -&amp;gt; master.compute(config));&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;or by executing arbitrary code:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;java language-java&quot;&gt;event.fireAsync(new Configuration()).whenComplete((config, throwable) -&amp;gt; {
          if (throwable != null) {
              System.err.println(&quot;Oops. Failed because of &quot; + throwable.getMessage());
          } else {
              master.compute(config);
          }
      });&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;code&gt;CompletionStage&lt;/code&gt; allows much more. If you are unfamiliar with the API see the
      &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html&quot;&gt;Javadoc&lt;/a&gt;
      page for more information.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_how_do_i_try_this_myself&quot;&gt;How do I try this myself?&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;It’s easy and multiple options are available. First of them is to use Weld in a
      &lt;strong&gt;standalone application&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;Create a new Java SE application.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Add dependency on Weld&lt;/p&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;java language-java&quot;&gt;&amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;org.jboss.weld.se&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;weld-se-core&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;3.0.0.Alpha3&amp;lt;/version&amp;gt;
      &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Create an empty &lt;code&gt;beans.xml&lt;/code&gt; file, e.g.&lt;/p&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;shell language-shell&quot;&gt;mkdir src/main/resources/META-INF
      touch src/main/resources/META-INF/beans.xml&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Launch Weld and fire an event asynchronously&lt;/p&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;java language-java&quot;&gt;public static void main(String[] args) {
          WeldContainer weld = new Weld().initialize();
          Event&amp;lt;String&amp;gt; evnt = weld.event().select(String.class);
          ExperimentalEvent&amp;lt;String&amp;gt; event = (ExperimentalEvent&amp;lt;String&amp;gt;) evnt;
      
          event.fireAsync(&quot;message&quot;);
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;_wildfly&quot;&gt;WildFly&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Alternatively, a patch is available for WildFly that upgrades Weld within an existing WildFly instance. See the
      &lt;a href=&quot;http://sourceforge.net/projects/jboss/files/Weld/3.0.0.Alpha3&quot;&gt;download page&lt;/a&gt;
      for more details.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Note that these new prototyped APIs are not part of the CDI API yet. Instead, they are currently located
      in
      &lt;a href=&quot;http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22org.jboss.weld%22%20AND%20a%3A%22weld-api%22&quot;&gt;Weld API&lt;/a&gt;
      in a package named
      &lt;a href=&quot;http://docs.jboss.org/weld/javadoc/3.0/weld-api/org/jboss/weld/experimental/package-frame.html&quot;&gt;org.jboss.weld.experimental&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;All these altered APIs have the &lt;code&gt;Experimental&lt;/code&gt; prefix (that’s why we are using &lt;code&gt;ExperimentalEvent&lt;/code&gt; in the examples)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;We would appreciate your feedback!&lt;/strong&gt; Feel free to use
      &lt;a href=&quot;https://community.jboss.org/en/weld?view=discussions&quot;&gt;Weld forums&lt;/a&gt;
      or the
      &lt;a href=&quot;https://lists.jboss.org/mailman/listinfo/cdi-dev&quot;&gt;cdi-dev mailing list&lt;/a&gt;
      for this purpose.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_what_s_next&quot;&gt;What’s next?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We are going to continue releasing early prototypes of features currently proposed for
      CDI 2.0. The plan is to release a new Alpha version every 3 weeks. There are several
      areas we want to focus on:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;simplifying how extensions register beans and observers&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;monitoring and debugging of CDI applications&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;experimenting with full interception (intercepting even calls within a given component)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;splitting the codebase into a “light” and “full” version (to support proposed &lt;strong&gt;CDI light&lt;/strong&gt; version)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;bootstrap API for SE environment&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/weld/javadoc/3.0/weld-api/org/jboss/weld/experimental/package-frame.html&quot;&gt;Experimental API documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12325836&quot;&gt;Release notes&lt;/a&gt; ]
      [ &lt;a href=&quot;https://sourceforge.net/projects/jboss/files/Weld/3.0.0.Alpha3&quot;&gt;Distribution&lt;/a&gt; ]
      [ Patch for Wildfly
      (&lt;a href=&quot;http://sourceforge.net/projects/jboss/files/Weld/3.0.0.Alpha3/wildfly-8.2.0.Final-weld-3.0.0.Alpha3-patch.zip/download&quot;&gt;8.2&lt;/a&gt;,
      &lt;a href=&quot;http://sourceforge.net/projects/jboss/files/Weld/3.0.0.Alpha3/wildfly-9.0.0.Alpha1-weld-3.0.0.Alpha3-patch.zip/download&quot;&gt;9 Alpha&lt;/a&gt;)
      ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2014/10/02/weld-300Alpha1/</id>
    <title>Weld 3.0.0.Alpha1 released!</title>
    <updated>2015-02-05T17:50:53+01:00</updated>
    <published>2014-10-02T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2014/10/02/weld-300Alpha1/" rel="alternate" type="text/html" />
    <author>
      <name>Jozef Hartinger</name>
    </author>
    <summary>
      
      Today we are releasing Weld 3.0.0.Alpha1. This release serves as an early proof of concept of some of the ideas that are being discussed by the CDI Expert Group for the upcoming
      CDI 2.0 specification. Furthermore, this is a great opportunity for the community to test-drive some of the proposed improvements and provide us with feedback.
      Be warned though that this released does not come with any guarantee of stability and that binary and functional compatibility is likely to be broken in the following releases.
      
      
      Ordering of observer methods
      
      
      The first of the new features are ordered observer methods. This requirement came up a...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Today we are releasing Weld 3.0.0.Alpha1. This release serves as an &lt;strong&gt;early proof of concept&lt;/strong&gt; of some of the ideas that are being discussed by the CDI Expert Group for the upcoming
      &lt;a href=&quot;http://cdi-spec.org/&quot;&gt;CDI 2.0 specification&lt;/a&gt;. Furthermore, this is a great opportunity for the community to test-drive some of the proposed improvements and &lt;strong&gt;provide us with feedback&lt;/strong&gt;.
      Be warned though that this released does not come with any guarantee of stability and that binary and functional compatibility is likely to be broken in the following releases.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_ordering_of_observer_methods&quot;&gt;Ordering of observer methods&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The first of the new features are ordered observer methods. This requirement came up a long ago and several approaches were proposed in the meantime, as documented by
      &lt;a href=&quot;https://issues.jboss.org/browse/CDI-4&quot;&gt;CDI-4&lt;/a&gt;.The Alpha1 release employs the general-purpose &lt;code&gt;@Priority&lt;/code&gt; annotation to determine the order in which observer methods are to be notified.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;There are many open questions about this feature. Here are some of the rules we set for the purpose of this experimental implementation. These are by no means set in stone but instead we encourage you
      to give us feedback on these:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Each observer method has a certain priority value. An observer method that does not define a priority explicitly is given the default priority which is 2500 (in the middle of the &lt;code&gt;Interceptor.Priority.APPLICATION&lt;/code&gt; range)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;The priority of an observer method determines the order. An observer method with lower value is called before an observer method with higher value&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;If multiple observer methods define the same priority value, the order is undefined&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Observer methods priorities should match &lt;a href=&quot;https://javaee-spec.java.net/nonav/javadocs/javax/interceptor/Interceptor.Priority.html&quot;&gt;existing priority range convention&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;The ordering applies to both transactional and non-transactional observer methods&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;The priority annotation is applied on the event parameter (not the observer method)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Here’s an example:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;java language-java&quot;&gt;public void sendWelcome(@Observes @Priority(APPLICATION + 800) @Registered User user) {
          // ...
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Note that &lt;code&gt;javax.annotation.Priority&lt;/code&gt; can currently only be applied to types. Therefore, we temporarily created a substitute called &lt;strong&gt;&lt;code&gt;org.jboss.weld.experimental.Priority&lt;/code&gt;&lt;/strong&gt; which is identical
      to the original except that it can also be applied on parameters (of observer methods). The plan is to propagate this change back to &lt;code&gt;javax.annotation.Priority&lt;/code&gt;. In the meantime, Weld’s twin
      gets the job done.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In addition to the &lt;code&gt;@Priority&lt;/code&gt; annotation, the SPI was also enhanced to expose the priority of an observer method. We are not touching &lt;code&gt;javax.enterprise&lt;/code&gt; interfaces just yet. Instead,
      the &lt;code&gt;org.jboss.weld.experimental&lt;/code&gt; package contains proposals for how the new SPI should look like. As the package name suggests, this SPI is good for a test-drive but do not expect it to be stable.
      To use the experimental SPIs, you’ll need to add a dependency on &lt;a href=&quot;http://search.maven.org/#artifactdetails%7Corg.jboss.weld%7Cweld-api%7C3.0.Alpha1%7Cjar&quot;&gt;weld-api&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Here’s an example of reading the observer method priority using the SPI in an Extension. &lt;code&gt;ExperimentalProcessObserverMethod&lt;/code&gt; and &lt;code&gt;ExperimentalObserverMethod&lt;/code&gt; interfaces come from the
      &lt;code&gt;org.jboss.weld.experimental package&lt;/code&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;java language-java&quot;&gt;public class SimpleExtension implements Extension {
      
          void observe(@Observes ExperimentalProcessObserverMethod&amp;lt;User, ?&amp;gt; event) {
              ExperimentalObserverMethod&amp;lt;User&amp;gt; observerMethod = event.getObserverMethod();
              this.priority = observerMethod.getPriority();
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Use the &lt;a href=&quot;https://issues.jboss.org/browse/CDI-4&quot;&gt;corresponding CDI ticket&lt;/a&gt; for any feedback on these features.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_vetoing_and_modifying_observer_methods&quot;&gt;Vetoing and modifying observer methods&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We’ll stay with observer methods for a few more paragraphs. A &lt;a href=&quot;https://issues.jboss.org/browse/CDI-458&quot;&gt;request&lt;/a&gt; was raised in the CDI issue tracker for making it possible to disable an
      observer method using the &lt;code&gt;ProcessObserverMethod&lt;/code&gt; SPI.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This Alpha1 release introduces the &lt;code&gt;veto()&lt;/code&gt; methods (aligned with &lt;code&gt;ProcessAnnotatedType.veto()&lt;/code&gt;) for this:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;java language-java&quot;&gt;void disableDebuggingObservers(@Observes ExperimentalProcessObserverMethod&amp;lt;?, Debug&amp;gt; event) {
          if (projectStage != ProjectStage.Development) {
              event.veto();
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In addition, the observer method metadata may be altered by an extension. This is done similarly to how &lt;code&gt;InjectionTarget&lt;/code&gt;, &lt;code&gt;InjectionPoint&lt;/code&gt; or &lt;code&gt;BeanAttribute&lt;/code&gt; metadata are modified which
      is most often by wrapping the original object (decorator design pattern). Any piece of metadata (including aforementioned priority) can be altered. For example, the transaction phase:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;java language-java&quot;&gt;void alterObserver(@Observes ExperimentalProcessObserverMethod&amp;lt;User, ?&amp;gt; event) {
          event.setObserverMethod(new ForwardingExperimentalObserverMethod&amp;lt;User&amp;gt;(event.getObserverMethod()) {
              @Override
              public TransactionPhase getTransactionPhase() {
                  return TransactionPhase.AFTER_SUCCESS;
              }
          });
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_repeatable_qualifiers_and_interceptor_bindings&quot;&gt;Repeatable qualifiers and interceptor bindings&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This release serves as a proof of concept for supporting repeating qualifiers and interceptor bindings. You can now fully utilize Java 8 features and use multiple qualifiers or interceptor bindings
      of the same type in the same location, for example:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;java language-java&quot;&gt;public class School {
      
          @Produces
          @Speaks(&quot;English&quot;)
          @Speaks(&quot;French&quot;)
          public Student graduate() {
              // ...
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Repeating qualifiers can be used for both bean and event resolution. See the &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/annotations/repeating.html&quot;&gt;Java documentation&lt;/a&gt; for how to define
      a repeating annotation.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_interceptor_bindings_in_invocation_context&quot;&gt;Interceptor bindings in invocation context&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This is an often recurring scenario. An interceptor binding defines several &lt;code&gt;@NonBinding&lt;/code&gt; members which serve as configuration for the interceptor. How does an interceptor get hold of these values?
      This is not easy as the interceptor binding may often appear on the intercepted method, the class that defined it or may be inherited from another interceptor binding or stereotype (even transitively!).
      This problem gave birth to utilities such as
      &lt;a href=&quot;https://git-wip-us.apache.org/repos/asf?p=deltaspike.git;a=blob;f=deltaspike/core/api/src/main/java/org/apache/deltaspike/core/util/AnnotationUtils.java;h=9d4c8e2f72936facf1ef0d8d9655c4186965afde;hb=HEAD&quot;&gt;this one&lt;/a&gt;.
      Still, even after all this effort the result is not entirely correct as it was obtained using Java reflection ignoring the fact that the interceptor binding may have been modified
      (e.g. using &lt;code&gt;ProcessAnnotatedType&lt;/code&gt;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This problem is being addressed as &lt;a href=&quot;https://issues.jboss.org/browse/CDI-468&quot;&gt;CDI-468&lt;/a&gt;. The Alpha1 release of Weld implements this feature and exposes new methods for obtaining interceptor bindings
      that are in effect for the interception. This is done using &lt;code&gt;ExperimentalInvocationContext.getInterceptorBindings()&lt;/code&gt; or &lt;code&gt;ExperimentalInvocationContext.getInterceptorBindingsByType()&lt;/code&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Again, &lt;code&gt;ExperimentalInvocationContext&lt;/code&gt; can be found in the &lt;code&gt;org.jboss.weld.experimental&lt;/code&gt; package and depicts how the future version of &lt;code&gt;javax.interceptor.InvocationContext&lt;/code&gt; could look like.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;java language-java&quot;&gt;@Interceptor
      @Secure
      public class SecurityInterceptor {
      
          @Inject
          private User user;
      
          @AroundInvoke
          public Object intercept(ExperimentalInvocationContext ctx) throws Exception {
              Secure binding = ctx.getInterceptorBindingsByType(Secure.class).iterator().next();
              if (!user.getRoles().contains(binding.requireRole())) {
                  throw new SecurityException();
              }
              return ctx.proceed();
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Again, your feedback is welcome at &lt;a href=&quot;https://issues.jboss.org/browse/CDI-468&quot;&gt;CDI-468&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_changes_in_the_annotated_layer&quot;&gt;Changes in the Annotated layer&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;CDI provides an abstraction over the Reflection API - &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.2/javax/enterprise/inject/spi/Annotated.html&quot;&gt;AnnotatedType and friends&lt;/a&gt; - which mostly allows extensions
      to alter the set of annotations present on a type, field, method, etc.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Alpha1 release contains two minor additions to this API. Firstly, the API now supports Java 8 repeating annotations with a new method &lt;code&gt;ExperimentalAnnotated.getAnnotationsByType(Class&amp;lt;T&amp;gt; annotationClass)&lt;/code&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Secondly, it is now possible to access the &lt;code&gt;java.lang.reflect.Parameter&lt;/code&gt; instance that is wrapped by &lt;code&gt;AnnotatedParameter&lt;/code&gt; using &lt;code&gt;ExperimentalAnnotatedParameter.getJavaParameter();&lt;/code&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See &lt;a href=&quot;https://issues.jboss.org/browse/CDI-471&quot;&gt;CDI-471&lt;/a&gt; and &lt;a href=&quot;https://issues.jboss.org/browse/CDI-481&quot;&gt;CDI-481&lt;/a&gt; for details.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_give_it_a_try&quot;&gt;Give it a try!&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/weld/javadoc/3.0/weld-api/org/jboss/weld/experimental/package-frame.html&quot;&gt;Experimental API documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12322333&quot;&gt;Release notes&lt;/a&gt; ]
      [ &lt;a href=&quot;https://sourceforge.net/projects/jboss/files/Weld/3.0.0.Alpha1&quot;&gt;Distribution&lt;/a&gt; ]
      [ &lt;a href=&quot;http://sourceforge.net/projects/jboss/files/Weld/3.0.0.Alpha1/wildfly-9.0.0.Alpha1-weld-3.0.0.Alpha1-patch.zip/download&quot;&gt;Patch for WildFly 9&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2014/09/18/weld-next/</id>
    <title>Weld.Next</title>
    <updated>2015-02-05T17:50:53+01:00</updated>
    <published>2014-09-18T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2014/09/18/weld-next/" rel="alternate" type="text/html" />
    <author>
      <name>Jozef Hartinger</name>
    </author>
    <summary>
      
      Today, we released Weld 2.2.5.Final. The fifth mostly bug-fixing release in the series addresses 23 issues.
      In addition, the Servlet module got an update and among other things now supports:
      
      
      
      
      all three bean discovery modes (e.g. only explicitly annotated classes will be loaded as CDI beans)
      
      
      bean archive isolation
      
      
      using Jandex for faster deployment discovery
      
      
      
      
      See the reference documentation 
      for details.
      
      
      Talking about documentation we are grateful to Antoine Sabot-Durand for migrating our reference documentation to AsciiDoc.
      We also thank our community contributors Antonin Stefanutti and Stefan Grossmann who contributed with pull requests.
      
      
      Weld 3.0
      
      
      In the coming months, our focus will be shifting towards Weld 3.0 - the...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Today, we released Weld 2.2.5.Final. The fifth mostly bug-fixing release in the series addresses &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12325389&quot;&gt;23 issues&lt;/a&gt;.
      In addition, the Servlet module got an update and among other things now supports:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;all three bean discovery modes (e.g. only explicitly annotated classes will be loaded as CDI beans)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;bean archive isolation&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;using Jandex for faster deployment discovery&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See the &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.2.5.Final/en-US/html/_application_servers_and_environments_supported_by_weld.html#_servlet_containers_such_as_tomcat_or_jetty&quot;&gt;reference documentation &lt;/a&gt;
      for details.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Talking about documentation we are grateful to &lt;a href=&quot;http://www.next-presso.com/author/antoine/&quot;&gt;Antoine Sabot-Durand&lt;/a&gt; for migrating our reference documentation to &lt;a href=&quot;http://www.methods.co.nz/asciidoc/&quot;&gt;AsciiDoc&lt;/a&gt;.
      We also thank our community contributors &lt;strong&gt;Antonin Stefanutti&lt;/strong&gt; and &lt;strong&gt;Stefan Grossmann&lt;/strong&gt; who contributed with pull requests.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_weld_3_0&quot;&gt;Weld 3.0&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In the coming months, our focus will be shifting towards &lt;strong&gt;Weld 3.0&lt;/strong&gt; - the future reference implementation of &lt;a href=&quot;http://cdi-spec.org/&quot;&gt;CDI 2.0&lt;/a&gt;.
      Initially, we plan on releasing Alpha releases every two weeks starting in early October.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Alpha releases are likely to break compatibility from time to time and will often contain bleeding edge or prototype code.
      The goals is however to give the CDI community a chance to test drive the proposed changes in the CDI specification as soon as possible and give quick feedback to the CDI expert group.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld 3.0 will also be a good opportunity to get involved in the development of this open-source project. &lt;strong&gt;Interested?&lt;/strong&gt; See our &lt;a href=&quot;http://weld.cdi-spec.org/community/&quot;&gt;community web page&lt;/a&gt; for more details.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2014/04/15/weld-220-final/</id>
    <title>Weld 2.2 (CDI 1.2 reference implementation) released!</title>
    <updated>2015-02-05T17:50:53+01:00</updated>
    <published>2014-04-15T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2014/04/15/weld-220-final/" rel="alternate" type="text/html" />
    <author>
      <name>Jozef Hartinger</name>
    </author>
    <summary>
      
      Today we released Weld 2.2.0.Final - the reference implementation of Contexts and Dependency Injection for Java EE 1.2 (CDI 1.2).
      Besides implementing the changes in the specification, this release comes with several new features, performance improvements and more than 50 bug fixes.
      
      
      CDI 1.2
      
      
      CDI 1.2 is a maintenance release of the CDI specification. It contains a number of small fixes and clarifications as well as several enhancements.
      Most notable changes for application developers are related to the definition of bean defining annotations.
      
      
      In CDI 1.2, the set of bean defining annotations now contains:
      
      
      
      
      all the normal scope annotations (e.g. @RequestScoped, @ApplicationScoped, &#8230;)
      
      
      the built-in @Dependent scope
      
      
      @Interceptor...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Today we released Weld 2.2.0.Final - the reference implementation of &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.2/cdi-spec.html&quot;&gt;Contexts and Dependency Injection for Java EE 1.2 (CDI 1.2)&lt;/a&gt;.
      Besides implementing the changes in the specification, this release comes with several new features, performance improvements and more than 50 bug fixes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_cdi_1_2&quot;&gt;CDI 1.2&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;CDI 1.2 is a maintenance release of the &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=346&quot;&gt;CDI specification&lt;/a&gt;. It contains a number of small fixes and clarifications as well as several enhancements.
      Most notable changes for application developers are related to the definition of &lt;em&gt;bean defining annotations&lt;/em&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.2/cdi-spec.html#bean_defining_annotations&quot;&gt;CDI 1.2&lt;/a&gt;, the set of bean defining annotations now contains:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;all the normal scope annotations (e.g. @RequestScoped, @ApplicationScoped, …)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;the built-in @Dependent scope&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;@Interceptor and @Decorator annotations&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;stereotype annotations&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As a result, any class annotated with a &lt;em&gt;bean defining annotation&lt;/em&gt; is by default recognized by the application server and registered as a CDI bean. The beans.xml file is optional.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In addition, there are other fixes, clarifications and minor enhancements in this maintenance release of the CDI specification.
      See &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12311062&amp;amp;version=12323655&quot;&gt;the release notes&lt;/a&gt; for the complete list of changes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_performance&quot;&gt;Performance&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld is now capable of using bytecode-scanning utilities, such as the &lt;a href=&quot;https://github.com/wildfly/jandex&quot;&gt;Jandex&lt;/a&gt; tool, to speed up deployment.
      This is especially notable in extra large deployments (e.g. 5000+ classes) where we observed up to &lt;strong&gt;20% faster deployment&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In addition, there are noticeable improvements in the following areas:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;runtime performance of observers, interceptors and decorators&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;session replication overhead (failover)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;memory consumption&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_weld_2_2_on_wildfly&quot;&gt;Weld 2.2 on WildFly&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://wildfly.org&quot;&gt;WildFly&lt;/a&gt; does not come with Weld 2.2 support yet. It is however easy to patch an existing WildFly installation to use Weld 2.2.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To do so, follow these steps:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;Download a patch appropriate for the WildFly version (e.g. 8.0.0.Final) from the &lt;a href=&quot;http://sourceforge.net/projects/jboss/files/Weld/2.2.0.Final/&quot;&gt;download section&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;In the WildFly installation, run the CLI console&lt;/p&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;sh jboss-cli.sh&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;From the console run the following command:&lt;/p&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;patch apply /path/to/wildfly-8.0.0.Final-weld-2.2.0.Final-patch.zip&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Your installation is now patched!&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_weld_se_and_servlet&quot;&gt;Weld SE and Servlet&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld comes with the SE module which allows CDI to be used in plain Java SE environment. In Weld 2.2 we added partial support for implicit bean archives.
      Partial support here means that the beans.xml file is still required, but &lt;strong&gt;bean-discovery-mode=”annotated”&lt;/strong&gt; can be specified for Weld to only discover classes explicitly annotated with bean defining annotations (see above).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In addition to the Weld SE module, Weld also provides the Weld Servlet module which makes it possible to use Weld on top of a plain Servlet container, such as Apache Tomcat or Jetty.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In this release we simplified configuration by bootstrapping Weld using the &lt;em&gt;ServletContainerInitializer&lt;/em&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Furthermore, Weld Servlet now supports &lt;strong&gt;Jetty 9.1&lt;/strong&gt;. At the same time, the support for &lt;strong&gt;Tomcat 6 was dropped&lt;/strong&gt;. To summarize, Weld Servlet is currently supported on the following Servlet containers:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Tomcat 7, 8&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Jetty 7, 8, 9.0, 9.1&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_acknowledgement&quot;&gt;Acknowledgement&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We greatly appreciate your contributions to this release.
      Big thanks go to: Martin Kouba, Matúš Abaffy, Matej Briškár, Ron Šmeral, Marek Schmidt, Marko Lukša, Tomáš Remeš, Stuart Douglas, Radoslav Husár, Max Pimm, Alexandre Gattiker, Antonin Stefanutti and Steve Moyer.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.2/&quot;&gt;CDI 1.2 API&lt;/a&gt; ]
      [ &lt;a href=&quot;http://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.2.0.Final/en-US/html/&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/issues/?filter=12321473&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2014/02/04/weld-220-alpha1/</id>
    <title>CDI 1.2 and Weld 2.2</title>
    <updated>2015-02-05T17:50:53+01:00</updated>
    <published>2014-02-04T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2014/02/04/weld-220-alpha1/" rel="alternate" type="text/html" />
    <author>
      <name>Jozef Hartinger</name>
    </author>
    <summary>
      
      Work on a maintenance release of the CDI specification (CDI 1.2) has started recently. Now is the best time to add feedback on issues being addressed. Most of the discussion happens in the cdi-dev mailing list or the IRC channel.
      
      
      Weld 2.2 is going to be the reference implementation of CDI 1.2. Besides implementing the changes introduced in the maintenance release, we are going to focus on improving non-functional characteristics in this release of Weld:
      
      
      
      
      bootstrap time
      
      
      memory footprint
      
      
      throughput
      
      
      maximum number of concurrent clients
      
      
      session replication overhead
      
      
      
      
      Today, we released Weld 2.2.0.Alpha1. The most significant changes include:
      
      
      
      
      Added new SPI that allows bytecode-scanning frameworks (such as jandex)...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Work on a maintenance release of the CDI specification (CDI 1.2) has started recently. Now is the best time to add feedback on &lt;a href=&quot;http://www.cdi-spec.org/news/2013/12/16/CDI-1-2-issues-list/&quot;&gt;issues being addressed&lt;/a&gt;. Most of the discussion happens in the &lt;a href=&quot;https://lists.jboss.org/mailman/listinfo/cdi-dev&quot;&gt;cdi-dev mailing list&lt;/a&gt; or the &lt;a href=&quot;http://webchat.freenode.net/?channels=jsr346&quot;&gt;IRC channel&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;Weld 2.2&lt;/strong&gt; is going to be the reference implementation of CDI 1.2. Besides implementing the changes introduced in the maintenance release, we are going to focus on improving non-functional characteristics in this release of Weld:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;bootstrap time&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;memory footprint&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;throughput&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;maximum number of concurrent clients&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;session replication overhead&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Today, we released &lt;strong&gt;Weld 2.2.0.Alpha1&lt;/strong&gt;. The most significant changes include:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Added &lt;a href=&quot;http://docs.jboss.org/weld/javadoc/2.2/weld-spi/org/jboss/weld/resources/spi/ClassFileInfo.html&quot;&gt;new SPI&lt;/a&gt; that allows bytecode-scanning frameworks (such as &lt;a href=&quot;https://github.com/wildfly/jandex&quot;&gt;jandex&lt;/a&gt;) to be integrated. This yields improved bootstrap time especially with large deployments.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Reduced memory consumption (our tests show 6-12% less memory used after bootstrap with large deployments)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Improved event/observer performance&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Java Web Start support finally got in (thanks to Alexandre Gattiker for the patch!)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Improved Servlet container support (Jetty 9.1, ServletContainerInitializer used to bootstrap Weld, Tomcat 8 support)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;A new Groovy example (groovy-numberguess) was added&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Many other bug fixes and improvements. See the &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12322332&quot;&gt;release notes&lt;/a&gt; for a complete list of changes&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Now, we continue to work on Weld 2.2. Expect the final version in late March. In the meantime, try this release and let us know what you think in the &lt;a href=&quot;https://community.jboss.org/en/weld&quot;&gt;forum&lt;/a&gt;. If you are interested in Weld make sure you check our &lt;a href=&quot;http://weld.cdi-spec.org/community/&quot;&gt;community page&lt;/a&gt; or the &lt;a href=&quot;https://issues.jboss.org/issues/?filter=12320398&quot;&gt;list of open issues awaiting contribution&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;https://sourceforge.net/projects/jboss/files/Weld/2.2.0.Alpha1&quot;&gt;Distribution&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12322332&quot;&gt;Release notes&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.2.0.Alpha1/en-US/html/&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.1/&quot;&gt;CDI 1.1 Javadoc&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2014/01/14/weld-212-final/</id>
    <title>Three new Weld releases</title>
    <updated>2015-02-05T17:50:53+01:00</updated>
    <published>2014-01-14T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2014/01/14/weld-212-final/" rel="alternate" type="text/html" />
    <author>
      <name>Jozef Hartinger</name>
    </author>
    <summary>
      
      This week we are releasing three new builds of Weld. Firstly, Weld 2.1.2.Final was released. This is a bug-fixing release with 11 issues resolved. Most notably:
      
      
      
      
      The conversation context is now initialized lazily. This resolves the problem with custom character encoding that many of you run into. See the reference documentation for details.
      
      
      Weld now runs fine on JDK8
      
      
      Jetty 9.1 is now supported by weld-servlet
      
      
      
      
      In addition, Weld 1.1.17.Final (CDI 1.0) was released with several bug fixes.
      
      
      Last but not least, there was a memory leak identified in GlassFish caused partly by GlassFish and partly by Weld. GlassFish still uses Weld 2.0. Although we...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This week we are releasing three new builds of Weld. Firstly, &lt;strong&gt;Weld 2.1.2.Final&lt;/strong&gt; was released. This is a bug-fixing release with 11 issues resolved. Most notably:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;The conversation context is now initialized lazily. This resolves the problem with custom character encoding that many of you run into. See the &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.1.2.Final/en-US/html/scopescontexts.html#d0e2009&quot;&gt;reference documentation&lt;/a&gt; for details.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld now runs fine on JDK8&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Jetty 9.1 is now supported by weld-servlet&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In addition, &lt;strong&gt;Weld 1.1.17.Final&lt;/strong&gt; (CDI 1.0) was released with several bug fixes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Last but not least, there was a &lt;a href=&quot;https://java.net/jira/browse/GLASSFISH-20928&quot;&gt;memory leak identified in GlassFish&lt;/a&gt; caused partly by GlassFish and partly by Weld. GlassFish still uses Weld 2.0. Although we do not maintain the 2.0 branch any longer and advice everyone to upgrade to Weld 2.1, the memory leak may be a problem for GlassFish users that are not able to upgrade to Weld 2.1 themselves. Therefore, we decided to do one more 2.0 release where this problem is fixed so that GlassFish users stuck on Weld 2.0 have an easy fix. Enjoy &lt;strong&gt;Weld 2.0.5.Final!&lt;/strong&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Now, our focus shifts completely towards Weld 2.2 where performance optimization and lowering memory consumption are the main goals. Expect first Alpha of Weld 2.2 by the end of January.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If you are interested in Weld make sure you check our &lt;a href=&quot;http://weld.cdi-spec.org/community/&quot;&gt;community page&lt;/a&gt; or the &lt;a href=&quot;https://issues.jboss.org/issues/?filter=12320398&quot;&gt;list of open issues awaiting contribution&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2013/12/11/weld-211-final/</id>
    <title>Weld 2.1.1.Final</title>
    <updated>2015-02-05T17:50:53+01:00</updated>
    <published>2013-12-11T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2013/12/11/weld-211-final/" rel="alternate" type="text/html" />
    <author>
      <name>Jozef Hartinger</name>
    </author>
    <summary>
      
      Weld 2.1.1.Final was released. More than 20 issues were addressed in this release. See the release notes for details. Thanks to everyone involved in this release!
      
      
      &#91; Distribution &#93;
      &#91; Release notes &#93;
      &#91; Documentation &#93;
      &#91; CDI 1.1 Javadoc &#93;
      ...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld 2.1.1.Final was released. More than 20 issues were addressed in this release. See the &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12322670&quot;&gt;release notes&lt;/a&gt; for details. Thanks to everyone involved in this release!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;https://sourceforge.net/projects/jboss/files/Weld/2.1.1.Final&quot;&gt;Distribution&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12322670&quot;&gt;Release notes&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.1.1.Final/en-US/html/&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.1/&quot;&gt;CDI 1.1 Javadoc&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2013/10/22/weld-210-final/</id>
    <title>Weld 2.1.0.Final</title>
    <updated>2015-02-05T17:50:53+01:00</updated>
    <published>2013-10-22T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2013/10/22/weld-210-final/" rel="alternate" type="text/html" />
    <author>
      <name>Jozef Hartinger</name>
    </author>
    <summary>
      
      I am pleased to announce that Weld 2.1.0.Final has just been released. Weld is the reference implementation of Contexts and Dependency Injection for Java EE (CDI).
      Here is the highlight of what’s new in Weld 2.1.0:
      
      
      
      
      OSGi support with Pax CDI
      
      
      Improved runtime performance and memory consumption
      
      
      Better integration with various Servlet dispatch types
      
      
      SLF4j was replaced with jboss-logging
      
      
      30 fixed bugs
      
      
      
      
      The future of Weld-OSGi
      
      
      Weld-osgi is a framework that allows the CDI programming model to be used in the OSGi environment.
      The framework was developed entirely by the Weld community and became a part of Weld since version 1.2.0
      
      
      The framework provides three main features:
      
      
      
      
      The CDI programming model...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;I am pleased to announce that Weld 2.1.0.Final has just been released. Weld is the reference implementation of &lt;a href=&quot;http://cdi-spec.org&quot;&gt;Contexts and Dependency Injection for Java EE (CDI)&lt;/a&gt;.
      Here is the highlight of what’s new in Weld 2.1.0:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;OSGi support with Pax CDI&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Improved runtime performance and memory consumption&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Better integration with various Servlet dispatch types&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;SLF4j was replaced with &lt;a href=&quot;https://github.com/jboss-logging&quot;&gt;jboss-logging&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;30 fixed bugs&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;weld-osgi&quot;&gt;The future of Weld-OSGi&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.slideshare.net/TrevorReznik/weldosgi-injecting-easiness-in-osgi&quot;&gt;Weld-osgi&lt;/a&gt; is a framework that allows the CDI programming model to be used in the OSGi environment.
      The framework was developed entirely by the Weld community and became a part of Weld since version 1.2.0&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The framework provides three main features:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;The CDI programming model can be used within OSGi bundles.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;The OSGi service layer and utility facilities are accessible through CDI injection&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;The CDI event bus can be used for both inter-bundle communication and delivering OSGi events.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The weld-osgi framework served as an inspiration for a standardization effort, known as &lt;a href=&quot;http://www.osgi.org/download/osgi-early-draft-2013-03.pdf&quot;&gt;RFC-193&lt;/a&gt; (formerly RFP-146).
      The proposal is now part of the &lt;a href=&quot;http://www.osgi.org/download/osgi-early-draft-2013-03.pdf&quot;&gt;OSGi early draft&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Due to the tight schedule of CDI 1.1, weld-osgi did never make it to Weld 2.0 and was therefore left behind, stuck in the gradually abandoned 1.2 branch.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In the meantime, work on the reference implementation of RFC-193 begun. The reference implementation is known as &lt;a href=&quot;https://ops4j1.jira.com/wiki/display/PAXCDI/Documentation&quot;&gt;Pax CDI&lt;/a&gt; and it is an open-source project hosted on &lt;a href=&quot;https://github.com/ops4j/org.ops4j.pax.cdi&quot;&gt;GitHub&lt;/a&gt;.
      Pax CDI aims to be portable across OSGi implementations as well as CDI implementations.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We always wanted to bring OSGi support back in Weld 2.1. However, we decided not to revive the weld-osgi framework nor align it to the new RFC-193 specification. Therefore, weld-osgi will not be merged into Weld 2.x code base.
      Instead, we decided to shift our focus towards Pax CDI and make sure it works well with Weld.
      This was done and Weld 2.1.0 is now one of the CDI runtimes supported by Pax CDI. You can play with the current &lt;a href=&quot;https://ops4j1.jira.com/wiki/display/PAXCDI/Download&quot;&gt;Pax CDI SNAPSHOT&lt;/a&gt;
      or wait for the upcoming &lt;a href=&quot;https://ops4j1.jira.com/browse/PAXCDI/fixforversion/11996&quot;&gt;0.5 release&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;EDIT 2013-10-30: Pax CDI 0.5.0 was released. See the &lt;a href=&quot;http://team.ops4j.org/wiki/display/PAXCDI/2013/10/27/Pax+CDI+0.5.0+Released&quot;&gt;release announcement&lt;/a&gt; for more details.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_performance&quot;&gt;Performance&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The CDI specification requires the request, conversation and application contexts to be active during every HTTP request.
      Obviously, the CDI contexts are not necessary for every HTTP request. Fetching a static resource is an example of one such request.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In Weld 2.1.0 we optimized the component that handles context activation/deactivation and cut down the overhead.
      In addition, it is now possible to completely suppress CDI context activation on certain types of HTTP requests should this minimized overhead still be undesired.
      See &lt;a href=&quot;https://community.jboss.org/people/mkouba/blog/2013/09/18/weld%E2%80%94skip-cdi-context-activation-for-some-http-requests&quot;&gt;Martin’s blog post&lt;/a&gt; or
      &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html/configure.html#d0e6194&quot;&gt;the reference documentation&lt;/a&gt; for more details.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_acknowledgement&quot;&gt;Acknowledgement&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We greatly appreciate your contributions to this release. Big thanks go to: Martin Kouba, Matúš Abaffy, Matej Briškár, Marko Lukša, Stuart Douglas, Marek Schmidt, Ron Šmeral, Tomáš Remeš, Max Pimm, Jesse McConnell, Harald Wellmann and Dirk Strauss.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;https://sourceforge.net/projects/jboss/files/Weld/2.1.0.Final&quot;&gt;Distribution&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/issues/?jql=project%20%3D%20WELD%20AND%20fixVersion%20in%20%28%222.1.0.Final%22%2C%20%222.1.0.Alpha1%22%2C%20%222.1.0.Beta1%22%2C%20%222.1.0.Beta2%22%2C%20%222.1.0.CR1%22%29%20ORDER%20BY%20updated%20ASC&quot;&gt;Release notes&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.1.0.Final/en-US/html/&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.1/&quot;&gt;CDI 1.1 Javadoc&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2013/09/20/weld-210beta2-tip/</id>
    <title>Weld 2.1.0.Beta2 tip</title>
    <updated>2015-02-05T17:50:53+01:00</updated>
    <published>2013-09-20T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2013/09/20/weld-210beta2-tip/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <summary>
      
      A tip how to configure a new feature introduced in Weld 2.1.0.Beta2 which allows to skip CDI context activation for some HTTP requests: http://goo.gl/PAiwBS
      ...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A tip how to configure a new feature introduced in Weld 2.1.0.Beta2 which allows to skip CDI context activation for some HTTP requests: &lt;a href=&quot;http://goo.gl/PAiwBS&quot;&gt;http://goo.gl/PAiwBS&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2013/06/20/new-weld-site/</id>
    <title>Weld has a new web site!</title>
    <updated>2015-02-05T17:50:53+01:00</updated>
    <published>2013-06-20T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2013/06/20/new-weld-site/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <summary>
      
      Weld has a new web site and it&#8217;s built with Awestruct!
      ...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld has a new web site and it&amp;#8217;s built with Awestruct!&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2013/06/06/weld-201-final/</id>
    <title>Weld 2.0.1.Final</title>
    <updated>2015-02-05T17:50:53+01:00</updated>
    <published>2013-06-06T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2013/06/06/weld-201-final/" rel="alternate" type="text/html" />
    <author>
      <name>Jozef Hartinger</name>
    </author>
    <summary>
      
      Weld 2.0.1.Final has been released. This is mainly a bug-fixing release with 20 issues fixed since the previous one. For details, see the release notes.
      
      
      Our focus is now shifting towards WildFly and its Weld integration in order to provide a CDI 1.1 compliant container. For details about CDI 1.1, see Pete&#8217;s blog post. Furthermore, we plan frequent releases of Weld to continue, so expect another release in early July at the latest!
      
      
      &#91; Distribution &#93;
      &#91; Release notes &#93;
      &#91; Documentation &#93;
      &#91; CDI 1.1 Javadoc &#93;
      ...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld 2.0.1.Final has been released. This is mainly a bug-fixing release with 20 issues fixed since the previous one. For details, see the &lt;a href=&quot;http://weld.cdi-spec.org/https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12321507:&quot;&gt;release notes&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Our focus is now shifting towards WildFly and its Weld integration in order to provide a CDI 1.1 compliant container. For details about CDI 1.1, see &lt;a href=&quot;http://in.relation.to/Bloggers/CDI11Available&quot;&gt;Pete&amp;#8217;s blog post&lt;/a&gt;. Furthermore, we plan frequent releases of Weld to continue, so expect another release in early July at the latest!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;https://sourceforge.net/projects/jboss/files/Weld/2.0.1.Final&quot;&gt;Distribution&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12321507&quot;&gt;Release notes&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.0.1.Final/en-US/html/&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.1/&quot;&gt;CDI 1.1 Javadoc&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2013/04/25/weld-200-final/</id>
    <title>Weld 2.0.0.Final released</title>
    <updated>2015-02-05T17:50:53+01:00</updated>
    <published>2013-04-25T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2013/04/25/weld-200-final/" rel="alternate" type="text/html" />
    <author>
      <name>Jozef Hartinger</name>
    </author>
    <summary>
      
      I am pleased to announce the release of Weld 2.0.0.Final, the reference implementation of Contexts and Dependency Injection for Java EE 1.1 (JSR 346). For a list of major changes in CDI 1.1 see the specification.
      
      
      The reference implementation will soon be available in GlassFish 4 and WildFly (formerly JBoss Application Server). In the meantime you can check snapshots of the application servers.
      
      
      As always, Weld artifacts can be obtained from maven or you can use a distribution bundle.
      
      
      Along with the Weld release comes the final release of the Technology Compatibility Kit (TCK) for CDI 1.1. Martin Kouba did an excellent job...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;I am pleased to announce the release of Weld 2.0.0.Final, the reference implementation of Contexts and Dependency Injection for Java EE 1.1 (&lt;a href=&quot;http://www.jcp.org/en/jsr/detail?id=346&quot;&gt;JSR 346&lt;/a&gt;). For a list of major changes in CDI 1.1 see the &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.1/cdi-spec.html#_major_changes&quot;&gt;specification&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The reference implementation will soon be available in &lt;a href=&quot;https://glassfish.java.net/&quot;&gt;GlassFish 4&lt;/a&gt; and &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly&lt;/a&gt; (formerly JBoss Application Server). In the meantime you can check snapshots of the application servers.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As always, Weld artifacts can be obtained from maven or you can use a distribution bundle.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Along with the Weld release comes the final release of the Technology Compatibility Kit (TCK) for CDI 1.1. Martin Kouba did an excellent job writing new tests and keeping the TCK in sync with the almost never-ending stream of specification changes. The TCK splits the specification into 1550 testable assertions out of which 96.71% is covered by TCK tests.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;I would like to thank to everyone who lent a hand and helped delivering these releases, especially: Martin Kouba, Pete Muir, Marko Lukša, Stuart Douglas, Marek Schmidt, Ron Šmeral, Tomáš Remeš, JJ Snyder, Phil Zampino, Tomaž Cerar, Hardy Ferentschik, Lincoln Baxter III, Matúš Abaffy and others.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ Distribution (&lt;a href=&quot;http://sourceforge.net/projects/jboss/files/Weld/2.0.0.Final/&quot;&gt;Weld&lt;/a&gt;, &lt;a href=&quot;https://sourceforge.net/projects/jboss/files/CDI-TCK/1.1.0.Final/&quot;&gt;CDITCK&lt;/a&gt;) ]
      [ Documentation (&lt;a href=&quot;http://docs.jboss.org/weld/reference/2.0.0.Final/en-US/&quot;&gt;Weld&lt;/a&gt;, &lt;a href=&quot;http://docs.jboss.org/cdi/tck/reference/1.1.0.Final/doc/&quot;&gt;CDITCK&lt;/a&gt;) ]
      [ Javadoc (&lt;a href=&quot;http://docs.jboss.org/cdi/api/1.1/&quot;&gt;CDI 1.1&lt;/a&gt;, &lt;a href=&quot;http://docs.jboss.org/weld/javadoc/2.0/&quot;&gt;Weld SPI&lt;/a&gt;) ]
      [ &lt;a href=&quot;https://issues.jboss.org/browse/WELD&quot;&gt;Issue tracker&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
</feed>
